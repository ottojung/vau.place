<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vau's Blog</title>
  <link href="https://vau.place/feed.atom" rel="self"/>
  <link href="https://vau.place"/>
  <head><link rel="stylesheet" type="text/css" href="https://vau.place/style/main.css"/></head>
  <updated>2022-12-24T17:10:34Z</updated>
  <author><name>Otto Jung</name></author>
  <id>https://vau.place</id>

  <entry>
    <title>I made a programming language</title>
	<summary>
      For my graduation thesis, I decided to make a programming language, and it was a lot of fun.
      The language is academic, but it is pacman-complete -- I use it myself every day as a calculator replacement.
      Please, take a look and send comments!
	</summary>
    <updated>2021-10-27T01:00:04Z</updated>
    <link href="https://vau.place/post/rose-lang.html"/>
    <id>https://vau.place/post/rose-lang.html</id>
    <content type="html" src="https://vau.place/post/rose-lang.html"/>
  </entry>

  <entry>
    <title>Printf supremacy</title>
	<summary>
      Not all functions are equal.
      Some simple, others not, some are safe, not all, some have side effects, and some don't.
      There is, however, a class of functions that are above all others,
      a higher cast, respected by compilers and language designers.
      Think of the most priviledged functions in Pascal,
      those that are blessed with the ability to receive variable number of arguments.
      Or in case of C, of these only functions to get their arguments dependently-typed-checked.
      Read along as I will try to convince you, the printf supremacy is real.
	</summary>
    <updated>2021-12-27T21:03:02Z</updated>
    <link href="https://vau.place/post/printf-supremacy.html"/>
    <id>https://vau.place/post/printf-supremacy.html</id>
    <content type="html" src="https://vau.place/post/printf-supremacy.html"/>
  </entry>

  <entry>
    <title>The incredible complexity of Javascript's if</title>
	<summary>
	  Conditional branching... The most fundamental construct in all of programming, the most common of them, the simplest of control flows, the first one to learn, and the basis of all machine learning.
      Its importance is hard to overestimate.
      But have you ever thought about what really happens when a language interpreter encounters an if statement?
	</summary>
    <updated>2021-12-10T13:42:40Z</updated>
    <link href="https://vau.place/post/javascript-falsy.html"/>
    <id>https://vau.place/post/javascript-falsy.html</id>
    <content type="html" src="https://vau.place/post/javascript-falsy.html"/>
  </entry>

  <entry>
    <title>Static types vs contracts</title>
	<summary>
      Everyone these days seems to be excited about static type systems.
      Well, I don't like that. Why did we suddenly forgot about the undeniable advantage of dynamic types - the mighty expressiveness that comes from the knowledge of runtime itself!
      Let me demonstrate.

	  x: random.choice([String, Int]) = read("2")

      See? Now do that with your dependent types ðŸ˜Š
	</summary>
    <link href="https://vau.place/post/hyper-dynamic.html"/>
    <updated>2021-11-16T00:52:06Z</updated>
    <id>https://vau.place/post/hyper-dynamic.html</id>
    <content type="html" src="https://vau.place/post/hyper-dynamic.html"/>
  </entry>

  <entry>
    <title>Have you seen Kernel?</title>
	<summary>
	  I like Kernel. It is such a simple language, yet so beautifully powerful.
	  It is a lisp, you know, but more in the schemey-way.
	  So there is homoiconicity and hygienic macros and continuations.
	  All baked into the language.
	  But unlike other lisps, Kernel has it all first-class!
	</summary>
    <link href="https://vau.place/post/kernel.html"/>
    <updated>2021-11-14T17:08:27Z</updated>
    <id>https://vau.place/post/kernel.html</id>
    <content type="html" src="https://vau.place/post/kernel.html"/>
  </entry>

</feed>
